---
layout: post
title: "Git SVN"
date: 2012-11-30 15:49
comments: true
categories: 
---
До работы в NAUMEN гитом я, можно сказать, не пользовался, svn-ом тем более. Со временем почувствовал уверенность в работе с гитом, уже легко делал коммиты, ребэйзы, мерджи. С svn-ом тоже пришлось столкнуться, так как некоторые вещи лежат в svn и переносить на git планов нет.  
Но была найдена удобная утилита git-svn, которая позволяля гитовскими командами работать с svn репозиториями. Конечно с удаленными ветками работать, просто как в гите нельзя, но вот локальные ветки - самые обычные как в гите.  
Одна небольшая проблема только в том, что svn, как я понимаю, не дружит с нелинейной историей, а я часто работаю одновременно в различных локальных ветках, а главная ветка в это время тоже обновляется. В документации git-svn не советуют пользоваться merge, а советуют сделать патчи для каждого коммита. И в таком случае если захочется смержить ветку с какой-то новой фичей с мастером, то необходимо сделать  
**Добавить все изменения из мастера в текущую ветку**  
`git rebase master`  
**Сформировать патчи для всех коммитов, которых нет в мастере**  
`git format-patch master`  
**Перейти в master**  
`git checkout master`  
**Применить нужные патчи**  
Раньше я делал это вручную, т.е. для каждого патча делал команду  
`git apply filename.patch`  
При этом все изменения не коммитятся, но становятся в состояние staged for commit и потом надо вручную коммитить.  
Можно воспользоваться командой  
`git am filename.patch`  
Но при этом дата коммита останется той, что была у коммита из которого сформирован это патч, что для линейной истории, которая нам нужна, совсем не хорошо.  
`git am filename.patch  --ignore-date`  
Такая команда позвонил сразу коммитит изменения патча и игнорирует дату патча, ставит текущую дату.  
С помощью следующей команды можно применить все патчи из текущей папки с игнорированием ошибок пробелов и с игнорированием даты  
`git am *.patch  --ignore-date --ignore-whitespace --ignore-space-change`
***
Вот такой первый пост.